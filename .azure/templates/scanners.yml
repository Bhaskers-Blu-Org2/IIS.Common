parameters:
  BuildFolder: ''
  SymbolsFolder: ''
  SourceFolder: ''
  BuildConfiguration: Release
  BuildPlatform: x86
  Product: ''
  ProductVersion: ''
  ProductBuild: ''
  PreScan: []
  PostScan: []

steps:
- ${{ parameters.PreScan }}

- task: CopyFiles@2
  displayName: 'Copy binaries to: $(build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: ${{ parameters.BuildFolder }}
    Contents: '**\?(*.exe|*.dll)'
    TargetFolder: '$(build.ArtifactStagingDirectory)\scan\bin\$(BuildPlatform)\release'

- task: CopyFiles@2
  displayName: 'Copy symbols to: $(build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: ${{ parameters.SymbolsFolder }}
    Contents: '**\*.pdb'
    TargetFolder: '$(build.ArtifactStagingDirectory)\scan\symbols\$(BuildPlatform)\release'

- task: securedevelopmentteam.vss-secure-development-tools.build-task-apiscan.APIScan@1
  displayName: 'Run APIScan'
  inputs:
    softwareFolder: '$(build.ArtifactStagingDirectory)\scan\bin\$(BuildPlatform)\release'
    softwareName: WebDeploy
    softwareVersionNum: ${{ parameters.ProductVersion }}
    softwareBuildNum: ${{ parameters.ProductBuild }}
    symbolsFolder: 'SRV*http://symweb;$(build.ArtifactStagingDirectory)\scan\symbols\$(BuildPlatform)\release'
    isLargeApp: false
    verbosityLevel: none

- task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
  displayName: 'Run PoliCheck'
  inputs:
    targetType: F
    targetArgument: ${{ parameters.SourceFolder }}

- task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
  displayName: 'Run BinSkim '
  inputs:
    InputType: Basic
    AnalyzeTarget: '$(build.ArtifactStagingDirectory)\scan\bin\$(BuildPlatform)\release\**\*.dll;$(build.ArtifactStagingDirectory)\scan\bin\$(BuildPlatform)\release\**\*.exe'
    AnalyzeSymPath: '$(build.ArtifactStagingDirectory)\scan\symbols\$(BuildPlatform)\release'
    AnalyzeVerbose: true

- task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
  displayName: 'Run CredScan'
  inputs:
    scanFolder: ${{ parameters.SourceFolder }}
    debugMode: false

- task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
  displayName: 'Run MpCmdRun.exe'
  inputs:
    FileDirPath: '$(build.ArtifactStagingDirectory)\scan\bin\$(BuildPlatform)\release'

- task: securedevelopmentteam.vss-secure-development-tools.build-task-vulnerabilityassessment.VulnerabilityAssessment@0
  displayName: 'Run Vulnerability Assessment'

- ${{ parameters.PostScan }}

- task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
  displayName: 'Create Security Analysis Report'
  inputs:
    AllTools: true
    BinSkimBreakOn: WarningAbove
    PoliCheckBreakOn: Severity4Above

- task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
  displayName: 'Publish Security Analysis Logs'

- task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
  displayName: 'Post Analysis'
  inputs:
    AllTools: true
